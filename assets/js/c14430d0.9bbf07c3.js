"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[4720],{197:function(e){e.exports=JSON.parse('{"name":"Moodle App","permalink":"/devdocs/docs/tags/moodle-app","docs":[{"id":"guides/moodleapp/development/testing/acceptance-testing","title":"Acceptance testing for the Moodle App","description":"In order to run tests that carry out automated functionality testing for the Moodle App, you can write [[Acceptance testing|Acceptance tests]]. This can be useful if you want to test plugins that are compatible with the app, or you\'re contributing to the app core. Behat tests for the app work the same way as tests for Moodle core, but they are not run as part of a normal Behat execution and there are some differences that we\'ll go through in this page.","permalink":"/devdocs/docs/guides/moodleapp/development/testing/acceptance-testing"},{"id":"guides/moodleapp/development/create-course-formats","title":"Creating mobile course formats","description":"Course format plugins can be supported in the app using the CoreCourseFormatDelegate.","permalink":"/devdocs/docs/guides/moodleapp/development/create-course-formats"},{"id":"guides/moodleapp/customisation/custom-apps","title":"Custom Moodle Apps","description":"Unfortunately, the core team does not have the resources to help people use the open source code to build custom apps.","permalink":"/devdocs/docs/guides/moodleapp/customisation/custom-apps"},{"id":"guides/moodleapp/development/network-debug","title":"Debugging network requests in the Moodle App","description":"Introduction","permalink":"/devdocs/docs/guides/moodleapp/development/network-debug"},{"id":"guides/moodleapp/index","title":"Moodle App","description":"Welcome to the Moodle App developer documentation!","permalink":"/devdocs/docs/guides/moodleapp/"},{"id":"guides/moodleapp/accessibility","title":"Moodle App Accessibility","description":"Screen readers","permalink":"/devdocs/docs/guides/moodleapp/accessibility"},{"id":"guides/moodleapp/development/coding-style","title":"Moodle App Coding style","description":"This document outlines the exceptions to the Coding style and [[JavaScript Coding Style]] which apply to the Moodle App and also includes rules for other technologies that are used in the app, like Typescript and Angular.","permalink":"/devdocs/docs/guides/moodleapp/development/coding-style"},{"id":"guides/moodleapp/customisation/index","title":"Moodle App Customisation","description":"The Moodle App can be customised in different ways:","permalink":"/devdocs/docs/guides/moodleapp/customisation/"},{"id":"guides/moodleapp/development/deep-linking","title":"Moodle App Deep Linking","description":"Overview","permalink":"/devdocs/docs/guides/moodleapp/development/deep-linking"},{"id":"guides/moodleapp/development/index","title":"Moodle App Development","description":"TODO","permalink":"/devdocs/docs/guides/moodleapp/development/"},{"id":"guides/moodleapp/development/development-process","title":"Moodle App Development process","description":"The development of new features and improvements in the Moodle App is organised in the following six phases:","permalink":"/devdocs/docs/guides/moodleapp/development/development-process"},{"id":"guides/moodleapp/development/docker-images","title":"Moodle App Docker images","description":"Moodle HQ provides a couple of Docker images that contain the Moodle App ready for use. You can search all the available versions in Docker Hub.","permalink":"/devdocs/docs/guides/moodleapp/development/docker-images"},{"id":"guides/moodleapp/overview","title":"Moodle App Overview","description":"The Moodle App is a mobile application that helps users make the best of their Moodle sites on handheld devices. It has some additional features like offline access, and a dedicated interface adapted to mobile. It\'s focused on student functionality, so you won\'t find all the features you have on the web for teachers and admins. You can learn more about the features available in the user documentation.","permalink":"/devdocs/docs/guides/moodleapp/overview"},{"id":"guides/moodleapp/development/plugins-development-guide","title":"Moodle App Plugins Development Guide","description":"If you want to add mobile support to your Moodle plugin, you can achieve it by extending different areas of the app using just PHP server side code and providing templates written with Ionic and custom components.","permalink":"/devdocs/docs/guides/moodleapp/development/plugins-development-guide"},{"id":"guides/moodleapp/development/plugins-upgrade-guide","title":"Moodle App Plugins Upgrade Guide","description":"Starting with version 3.9.5, the Moodle App uses Ionic 5. As usual, we tried not to change our APIs and components to prevent breaking existing plugins. Unfortunately, Ionic 5 comes with a lot of breaking changes, especially related to templates. This means that plugins need to be adapted in order to look good in the new versions of the app.","permalink":"/devdocs/docs/guides/moodleapp/development/plugins-upgrade-guide"},{"id":"guides/moodleapp/development/release-process","title":"Moodle App Release process","description":"Two weeks before (Code freeze)","permalink":"/devdocs/docs/guides/moodleapp/development/release-process"},{"id":"guides/moodleapp/customisation/remote-themes","title":"Moodle App Remote themes","description":"How do Remote themes work?","permalink":"/devdocs/docs/guides/moodleapp/customisation/remote-themes"},{"id":"guides/moodleapp/customisation/remote-themes-upgrade-guide","title":"Moodle App Remote themes upgrade guide","description":"In the following guide, you will find some examples to migrate your styles from an older version to work with the Ionic 5 Moodle App (starting at version 3.9.5). You will find tables where each row is a migration to do; the left part is the old code and the right part the new one.","permalink":"/devdocs/docs/guides/moodleapp/customisation/remote-themes-upgrade-guide"},{"id":"guides/moodleapp/development/scripts/index","title":"Moodle App Scripts","description":"Here you can find the current available scripts in the Moodle App","permalink":"/devdocs/docs/guides/moodleapp/development/scripts/"},{"id":"guides/moodleapp/development/scripts/gulp-push","title":"Moodle App Scripts: gulp push","description":"Overview","permalink":"/devdocs/docs/guides/moodleapp/development/scripts/gulp-push"},{"id":"guides/moodleapp/translation","title":"Moodle App Translation","description":"Moodle App translations","permalink":"/devdocs/docs/guides/moodleapp/translation"},{"id":"guides/moodleapp/development/custom-push-notifications","title":"Sending custom Push Notifications to the Moodle App","description":"There are two ways to send custom Push Notifications to the Moodle app users:","permalink":"/devdocs/docs/guides/moodleapp/development/custom-push-notifications"},{"id":"guides/moodleapp/development/setup","title":"Setting up your development environment for the Moodle App","description":"The structure of this page is the following:","permalink":"/devdocs/docs/guides/moodleapp/development/setup"},{"id":"guides/moodleapp/development/testing/index","title":"Testing the Moodle App","description":"TODO","permalink":"/devdocs/docs/guides/moodleapp/development/testing/"},{"id":"guides/moodleapp/development/testing/unit-testing","title":"Unit testing for the Moodle App","description":"Unit tests are written in JavaScript using Jest. If you want to create a new one, Jest is already configured and you only need to create a file ending with .test.ts within the project. If you\'re going to do so, remember to follow the [[Moodle App Development Guide#Test_files|file location conventions]].","permalink":"/devdocs/docs/guides/moodleapp/development/testing/unit-testing"},{"id":"guides/moodleapp/development/app-in-browser","title":"Using the Moodle App in a browser","description":"Browsers are not officially supported by the application, but you can use a Chromium-based browser for development if you don\'t need any native functionality.","permalink":"/devdocs/docs/guides/moodleapp/development/app-in-browser"}],"allTagsPath":"/devdocs/docs/tags"}')}}]);